type Mutation {
  toggleTodoStatus(input: ToggleTodoStatusMutationInput!): ToggleTodoStatusMutationPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  viewer: User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

# Todo Item
type Todo implements Node {
  # The ID of an object
  id: ID!
  title: String!
  isDone: Boolean!
}

# A connection to a list of items.
type TodoConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TodoEdge]
}

# An edge in a connection.
type TodoEdge {
  # The item at the end of the edge
  node: Todo

  # A cursor for use in pagination
  cursor: String!
}

input ToggleTodoStatusMutationInput {
  isDone: Boolean!
  id: String!
  clientMutationId: String
}

type ToggleTodoStatusMutationPayload {
  todo: Todo
  viewer: User
  clientMutationId: String
}

# User
type User implements Node {
  # The ID of an object
  id: ID!
  name: String!
  todos(after: String, first: Int, before: String, last: Int): TodoConnection
  totalCount: Int
  completedCount: Int
}
